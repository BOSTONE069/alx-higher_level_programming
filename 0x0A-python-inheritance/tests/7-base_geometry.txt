The ``7-base_geometry`` module
==============================

Using ``BaseGeometry``
----------------------

This is a text file in reStructuredText format. Refer to the
following documentation for details on proper guidelines:
https://docs.python.org/3/library/doctest.html
First import ``BaseGeometry`` from the ``7-base_geometry`` module:

>>> BaseGeometry = __import__('7-base_geometry').BaseGeometry

Command line call for Doctest:
python3 -m doctest -v ./tests/7-base_geometry.txt | tail -2

Now use it:

Base cases
----------

>>> bg = BaseGeometry()

>>> type(bg)
<class '7-base_geometry.BaseGeometry'>

>>> type(BaseGeometry())
<class '7-base_geometry.BaseGeometry'>

>>> bg.integer_validator("my_int", 12)

>>> bg.integer_validator("name", "John")
Traceback (most recent call last):
...
TypeError: name must be an integer

>>> bg.integer_validator("age", 0)
Traceback (most recent call last):
...
ValueError: age must be greater than 0

>>> bg.integer_validator("distance", -4)
Traceback (most recent call last):
...
ValueError: distance must be greater than 0

>>> bg.area()
Traceback (most recent call last):
...
Exception: area() is not implemented

Other cases
-----------

>>> bg.integer_validator()
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: integer_validator() missing 2 required positional arguments: 'name' and 'value'

>>> bg.integer_validator("name")
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: integer_validator() missing 1 required positional argument: 'value'

>>> bg.integer_validator("name", 12, 15)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: integer_validator() takes 3 positional arguments but 4 were given

Other cases on 2nd argument
---------------------------

>>> bg.integer_validator("distance", 1.4)
Traceback (most recent call last):
...
TypeError: distance must be an integer

>>> bg.integer_validator("distance", True)
Traceback (most recent call last):
...
TypeError: distance must be an integer

>>> bg.integer_validator("distance", None)
Traceback (most recent call last):
...
TypeError: distance must be an integer

>>> bg.integer_validator("distance", [])
Traceback (most recent call last):
...
TypeError: distance must be an integer

>>> bg.integer_validator("distance", [1])
Traceback (most recent call last):
...
TypeError: distance must be an integer

>>> bg.integer_validator("distance", ())
Traceback (most recent call last):
...
TypeError: distance must be an integer

>>> bg.integer_validator("distance", (1))

>>> bg.integer_validator("distance", {})
Traceback (most recent call last):
...
TypeError: distance must be an integer

>>> bg.integer_validator("distance", {"a": 1})
Traceback (most recent call last):
...
TypeError: distance must be an integer

>>> bg.integer_validator("distance", {3, 4})
Traceback (most recent call last):
...
TypeError: distance must be an integer

>>> bg.integer_validator("distance", "")
Traceback (most recent call last):
...
TypeError: distance must be an integer

>>> bg.integer_validator("distance", bg)
Traceback (most recent call last):
...
TypeError: distance must be an integer

>>> bg.integer_validator("distance", dir())
Traceback (most recent call last):
...
TypeError: distance must be an integer

>>> bg.integer_validator("distance", BaseGeometry())
Traceback (most recent call last):
...
TypeError: distance must be an integer

>>> bg.integer_validator("distance", BaseGeometry)
Traceback (most recent call last):
...
TypeError: distance must be an integer
